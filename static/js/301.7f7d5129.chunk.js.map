{"version":3,"file":"static/js/301.7f7d5129.chunk.js","mappings":"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","sources":["components/RadioButton.jsx","api/axiousAuth.js","validations/UserValidation.js","components/CreateUserForm.jsx","components/Loader.jsx"],"sourcesContent":["const RadioButton = ({ name, value, selected, text, onChange }) => {\r\n  return (\r\n    <label className=\"radioButton__radio-container\">\r\n      <input\r\n        value={value}\r\n        name={name}\r\n        className=\"radioButton__input\"\r\n        type=\"radio\"\r\n        onClick={() => onChange(value)}\r\n      />\r\n\r\n      <div\r\n        className={`radioButton__circle ${\r\n          value === selected && 'radioButton__circle--active'\r\n        }`}\r\n      ></div>\r\n      {/* <div\r\n        className={`radioButton__outer-circle ${\r\n          value !== selected && 'radioButton__outer-circle--unselected'\r\n        }`}\r\n      >\r\n        <div\r\n          className={`radioButton__inner-circle ${\r\n            value !== selected && 'radioButton__inner-circle--unselected-circle'\r\n          }`}\r\n        />\r\n      </div> */}\r\n      <div className=\"radioButton__helper-text\">{text}</div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default RadioButton;\r\n","import axiosget from './axios';\r\nimport axios from 'axios';\r\n\r\nconst getToken = async () => {\r\n  const result = await axiosget.get('/token');\r\n\r\n  return result.data.token;\r\n};\r\n\r\nconst axiousAuth = async () => {\r\n  const token = await getToken();\r\n\r\n  return axios.create({\r\n    baseURL: 'https://frontend-test-assignment-api.abz.agency/api/v1',\r\n    headers: { Token: token },\r\n  });\r\n};\r\n\r\nexport default axiousAuth;\r\n","import * as Yup from 'yup';\r\n\r\nconst validPhone = /^(?:\\+38)?(0\\d{9})$/;\r\n\r\nconst emailValidation =\r\n  /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string()\r\n    .min(2, 'Name should have more than 2 characters')\r\n    .required('Enter your name')\r\n    .max(60, 'Name should have less than 60 characters'),\r\n  email: Yup.string()\r\n    .required('Enter email')\r\n    .matches(emailValidation, 'Enter valid email (example-email@gmail.com)'),\r\n  phone: Yup.string()\r\n    .matches(validPhone, 'Number shoud have format +38 XXX XXX XX XX ')\r\n    .required('Enter phone number'),\r\n  photo: Yup.mixed()\r\n    .required('Download your photo')\r\n    .test('fileType', 'Photo must have jpeg/jpg formats', (value) => {\r\n      return (\r\n        (value && value.type === 'image/jpg') ||\r\n        (value && value.type === 'image/jpeg')\r\n      );\r\n    })\r\n    .test('fileSize', 'Photo is too large, max size 5mb', (value) => {\r\n      return value && value.size <= 5000000;\r\n    })\r\n    .test('filePX', 'Photo should be at least 70x70 px ', (value) => {\r\n      return value && value.size >= 500;\r\n    }),\r\n});\r\n\r\nexport default validationSchema;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axiosget from '../api/axios';\r\nimport Button from './Button';\r\nimport RadioButton from './RadioButton';\r\nimport axiousAuth from '../api/axiousAuth';\r\nimport { Formik } from 'formik';\r\nimport validationSchema from '../validations/UserValidation';\r\nimport classNames from 'classnames';\r\nimport succesRegisterImg from '../assets/images/success-image.png';\r\nimport Loader from './Loader';\r\n\r\nconst fields = [\r\n  { fieldName: 'name', text: 'Your name' },\r\n  { fieldName: 'email', text: 'Email' },\r\n  {\r\n    fieldName: 'phone',\r\n    text: 'Phone',\r\n    defaultHelperText: '+38 (XXX) XXX - XX - XX',\r\n  },\r\n];\r\n\r\nconst CreateUserForm = ({ getUsers }) => {\r\n  const [userPositions, setUserPosition] = useState([]);\r\n  const [successRegistration, setsuccessRegistration] = useState(false);\r\n  const [responseError, setResponseError] = useState('');\r\n  const [isSending, setIsSending] = useState(false);\r\n  const formData = new FormData();\r\n\r\n  useEffect(() => {\r\n    const getPositions = async () => {\r\n      const response = await axiosget.get('/positions');\r\n      setUserPosition(response.data.positions);\r\n    };\r\n\r\n    getPositions();\r\n  }, []);\r\n\r\n  const sentForm = async (values) => {\r\n    setIsSending(true);\r\n\r\n    formData.set('position_id', values.position_id.toString());\r\n    formData.set('name', values.name);\r\n    formData.set('email', values.email);\r\n    formData.set('phone', values.phone);\r\n    formData.set('photo', values.photo);\r\n\r\n    setResponseError('');\r\n\r\n    try {\r\n      const axiosToken = await axiousAuth();\r\n      const response = await axiosToken.post('/users', formData);\r\n      if (response.data.success) {\r\n        setIsSending(false);\r\n        setsuccessRegistration(true);\r\n        getUsers();\r\n      } else {\r\n        throw new Error('Somthing went wrong');\r\n      }\r\n    } catch (error) {\r\n      setIsSending(false);\r\n      setResponseError(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  if (successRegistration) {\r\n    return (\r\n      <div className=\"successRegistaration page__container\">\r\n        <h1 className=\"successRegistaration__title\">\r\n          User successfully registered\r\n        </h1>\r\n        <div className=\"successRegistaration__img-container\">\r\n          <img\r\n            className=\"successRegistaration__img\"\r\n            src={succesRegisterImg}\r\n            alt=\"img-success-Registaration\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section id=\"sign-up\" className=\"createUserForm\">\r\n      <h1 className=\"createUserForm__title\">Working with POST request</h1>\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        initialValues={{\r\n          name: '',\r\n          email: '',\r\n          phone: '',\r\n          position_id: 1,\r\n          photo: null,\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(value) => {\r\n          sentForm(value);\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          isValid,\r\n          handleSubmit,\r\n          dirty,\r\n          setFieldValue,\r\n        }) => (\r\n          <form onSubmit={handleSubmit} className=\"createUserForm__form\">\r\n            <div className=\"createUserForm__main-inputs\">\r\n              {fields.map((field) => {\r\n                const { fieldName, text, defaultHelperText } = field;\r\n                return (\r\n                  <div\r\n                    key={fieldName}\r\n                    className=\"createUserForm__input-container\"\r\n                  >\r\n                    <input\r\n                      className={classNames('createUserForm__input', {\r\n                        'createUserForm__input--error':\r\n                          touched[fieldName] && errors[fieldName],\r\n                      })}\r\n                      type=\"text\"\r\n                      id={fieldName}\r\n                      name={fieldName}\r\n                      value={values[fieldName]}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                    />\r\n                    <label\r\n                      className={classNames('createUserForm__label', {\r\n                        'not-Empty': values[fieldName],\r\n                        'createUserForm__label--error':\r\n                          touched[fieldName] && errors[fieldName],\r\n                      })}\r\n                      htmlFor={fieldName}\r\n                    >\r\n                      {text}\r\n                    </label>\r\n                    <p\r\n                      className={classNames('createUserForm__input-helper', {\r\n                        'createUserForm__input-helper--error':\r\n                          touched[fieldName] && errors[fieldName],\r\n                      })}\r\n                    >\r\n                      {(touched[fieldName] &&\r\n                        errors[fieldName] &&\r\n                        errors[fieldName]) ||\r\n                        defaultHelperText}\r\n                    </p>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div role={'group'} className=\"createUserForm__user-position\">\r\n              <p className=\"createUserForm__positions-title\">\r\n                Select your position\r\n              </p>\r\n              {userPositions.length > 0 &&\r\n                userPositions.map((position) => (\r\n                  <RadioButton\r\n                    key={position.id}\r\n                    name=\"position_id\"\r\n                    value={position.id}\r\n                    selected={values.position_id}\r\n                    text={position.name}\r\n                    onChange={(value) => setFieldValue('position_id', value)}\r\n                  />\r\n                ))}\r\n            </div>\r\n            <div\r\n              className={classNames('createUserForm__file-uploader', {\r\n                'createUserForm__file-uploader--error':\r\n                  errors.photo && touched.photo,\r\n              })}\r\n            >\r\n              <input\r\n                onChange={(event) =>\r\n                  setFieldValue('photo', event.currentTarget.files[0])\r\n                }\r\n                onBlur={handleBlur}\r\n                type=\"file\"\r\n                style={{ display: 'none' }}\r\n                multiple={false}\r\n                id=\"fileloader\"\r\n              />\r\n              <label\r\n                htmlFor=\"fileloader\"\r\n                className={classNames('createUserForm__fileLoad-btn', {\r\n                  'createUserForm__fileLoad-btn--error':\r\n                    errors.photo && touched.photo,\r\n                })}\r\n              >\r\n                Upload\r\n              </label>\r\n              <p\r\n                className={classNames('createUserForm__fileName', {\r\n                  'createUserForm__fileName--empty': !values.photo,\r\n                })}\r\n              >\r\n                {(values.photo && values.photo.name) || 'Upload your photo'}\r\n              </p>\r\n              <p className=\"createUserForm__input-helper createUserForm__input-helper--error\">\r\n                {touched.photo && errors.photo}\r\n              </p>\r\n            </div>\r\n            <h2 className=\"createUserForm__responseError\">{responseError}</h2>\r\n            {isSending ? (\r\n              <Loader />\r\n            ) : (\r\n              <Button\r\n                disabled={!isValid || !dirty}\r\n                classModificator=\"createUserForm__button\"\r\n              >\r\n                Sign up\r\n              </Button>\r\n            )}\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CreateUserForm;\r\n","const Loader = () => {\r\n  return <div className=\"loader\"></div>;\r\n};\r\n\r\nexport default Loader;\r\n"],"names":["name","value","selected","text","onChange","className","type","onClick","getToken","axiosget","result","data","token","axiousAuth","axios","baseURL","headers","Token","Yup","min","required","max","email","matches","phone","photo","test","size","fields","fieldName","defaultHelperText","getUsers","useState","userPositions","setUserPosition","successRegistration","setsuccessRegistration","responseError","setResponseError","isSending","setIsSending","formData","FormData","useEffect","getPositions","response","positions","sentForm","values","set","position_id","toString","axiosToken","post","success","Error","message","src","succesRegisterImg","alt","id","validationSchema","initialValues","validateOnBlur","onSubmit","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","setFieldValue","map","field","classNames","onBlur","htmlFor","role","length","position","event","currentTarget","files","style","display","multiple","Loader","Button","disabled","classModificator"],"sourceRoot":""}